<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D3</title>
    <style>
        .upGreenArrow{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 4.5px 12px 4.5px;
    border-color: transparent transparent #00ff00 transparent;
 }
   
 .downRedArrow{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 12px 4.5px 0 4.5px;
    border-color: #ff0000 transparent transparent transparent;
 }
 
 .upArrow{
   position: relative;
   top: -15px;
   left: -10px;
   width:0;
   height:0;
   border: 6px solid transparent;
   border-bottom-color: #00ff00;
 }
 .upArrow:after{
   position: absolute;
   content: '';
   top: 20px;
   left: -3px;
   width: 6px;
   height: 10px;
   background: #00ff00;
 }
 
 .downArrow{
   position: relative;
   top: 18px;
   left: -10px;
   width: 0;
   height: 0;
   border: 6px solid transparent;
   border-top-color: #ff0000;
 }
 .downArrow:after{
   position: absolute;
   content: '';
   top: -15px;
   left: -3px;
   width: 6px;
   height: 10px;
   background: #ff0000;
 }
 
 
 /* d3 candle stick start */
 
 .axis path,
 .axis line {
     fill: none;
     stroke: black;
     shape-rendering: crispEdges;
 }
 
 .axis text {
     font-family: 'Open Sans', sans-serif;
     font-size: 11px;
     fill: black;
 }
 
 /* d3 candle stick end */
 
 body {
   background-color: white;
 }
    </style>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src="d3/d3.min.js"></script>
</head>
<body>
    <h1>Example D3</h1>
    <div id="ex1">
        <h3>막대 그래프</h3>
        <svg width="500" height="100"></svg>
        <script type="text/javascript">
            const dataFile = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50];

            const svg = d3.select('svg');

            svg.selectAll('bar')
               .data(dataFile)
               .enter().append('rect')
               .attr('height', (d, i) => { return d })
               .attr('width', 40)
               .attr('x', (d, i) => { return 50 * i })
               .attr('y', (d, i) => { return 100 - d })
        </script>
    </div>
        
    <div id="ex2">
        <h3>파이 그래프</h3>
    </div>
    <script type="text/javascript">
        var height = 450,
            width = 450,
            outerRadius = Math.min(width, height) / 2, // 바깥 지름
            innerRadius = outerRadius * .5, // 안쪽 지름
            color = d3.scaleOrdinal(d3.schemeCategory10); // d3 표준 색상, v5에선 category10만 지원
        
        var dataset = [
            {name: "동화약품", value: 238500},
            {name: "CJ대한통운", value: 160500},
            {name: "두산", value: 100500},
            {name: "대림산업", value: 99900},
            {name: "삼양홀딩스", value: 78100}
        ];

        // 파이 차트를 감싸는 태그
        var vis = d3.select("#ex2")
            .append("svg:svg")
                .attr("width", width)
                .attr("height", height)
                .append("svg:g")
                    .attr("transform", `translate(${outerRadius}, ${outerRadius})`) // "translate(x축 이동거리, y축 이동거리)
                    .data([dataset]);
        
        var arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius); // 파이 차트 생성

        var pie = d3.pie().value(function (d) { return d.value }) // 파이 차트의 특별한 형식에 맞는 값을 추출할 수 있는 구조를 만듬, 파이 차트 조각 값들 인듯
    
        // 파이 차트 조각 구조를 생성, g.slice가 5개 생김
        var arcs = vis.selectAll("g.slice")
            .data(pie)
            .enter()
            .append("svg:g")
                .attr("class", "slice");
        
        // g.slice에 자식으로 path 태그를 추가하고 d 속성을 통해 path를 자동으로 그리고 fill로 색칠해줌
        arcs.append("svg:path")
            .attr("d", arc)
            .attr("fill", function(d, i) { return color(i); });

        // 데이터 값을 할당하고 위치 값을 설정
        arcs.append("svg:text")
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .attr("transform", function(d) { return `translate(${arc.centroid(d)})rotate(${angle(d)})` })
            .text(function(d) { return d.data.name; }); // 데이터를 가져옴
        
        function angle(d) {
            var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
            return a > 90 ? a - 180 : a;
        };

        // 파이 차트 중앙에 '주식' 텍스트 추가
        vis.append("svg:text")
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .text("주식")
            .attr("class", "title");
    </script>

    <div id="ex3">
        <h3>그래프</h3>
        <svg width="350px" height="350px"></svg>
        <script>
            const data = [
                { value : 3, time : new Date("2020-05-07T03:00:00") },
                { value : 1, time : new Date("2020-05-07T03:05:00") },
                { value : 9, time : new Date("2020-05-07T03:10:00") },
                { value : 6, time : new Date("2020-05-07T03:15:00") },
                { value : 2, time : new Date("2020-05-07T03:20:00") },
                { value : 6, time : new Date("2020-05-07T03:25:00") }
            ];

            // domain은 데이터의 일반적으로 최소, 최대값으로 설정하며 range는 표출할 범위의 너비, 높이값
            const xScale = d3.scaleTime()
                .domain([new Date("2020-05-07T03:00:00"), new Date("2020-05-07T03:25:00")])
                .range([20, 330]);
            const yScale = d3.scaleLinear()
                .domain([1, 9])
                .range([330, 20])
            
            // SVG안에 g태그를 생성, svg 내부에서 좌표계는 y값이 높을 수록 아래로 향하기 때문에 xAxisSVG에 attr 추가
            const xAxisSVG = d3.select("#ex3 > svg").append("g").attr("transform", "translate(0, 330)");
            const yAxisSVG = d3.select("#ex3 > svg").append("g");

            // 축을 만드는 함수
            const xAxis = d3.axisBottom(xScale).tickSize(10).ticks(10);
            const yAxis = d3.axisRight(yScale).tickSize(10).ticks(10);
            xAxis(xAxisSVG);  //x축을 만드는 함수로 SVG > G 태그에 축을 생성한다.
            yAxis(yAxisSVG);  //y축을 만드는 함수로 SVG > G 태그에 축을 생성한다.

            // 점을 생성
            d3.select("#ex3 > svg").selectAll("circle") // svg안 모든 점을 찾음
              .data(data) // 찾은 요소에 데이터를 씌움
              .enter() // 찾은 요소의 개수보다 데이터가 많은 경우...
              .append("circle") // circle을 추가
              .attr("r", 5) // 반지름 5픽셀
              .attr("cx", d => xScale(d.time)) // x위치값
              .attr("cy", d => yScale(d.value)) // y위치값
              .style("fill", "black")

            // 선을 생성하는 함수
            const linearGenerator = d3.line()
                .x(d => xScale(d.time))
                .y(d => yScale(d.value))

            d3.select("#ex3 > svg")
              .append("path") // svg에 path태그 추가
              .attr("d", linearGenerator(data)) // 라인 생성기로 'd' 속성에 들어갈 좌표정보를 얻음
              .attr("fill", "none") // 라인 안쪽을 채우지 않음
              .attr("stroke-width", 2) // 선 굵기
              .attr("stroke", "black")
        </script>
    </div>

    <div id="ex4">
        <h3>봉 차트</h3>
        <svg id="container"></svg>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/lodash@4.17.10/lodash.min.js"></script>
        <script>
function drawChart() {

d3.csv("FTSE.csv").then(function(prices) {
    
    const months = {0 : 'Jan', 1 : 'Feb', 2 : 'Mar', 3 : 'Apr', 4 : 'May', 5 : 'Jun', 6 : 'Jul', 7 : 'Aug', 8 : 'Sep', 9 : 'Oct', 10 : 'Nov', 11 : 'Dec'}

    var dateFormat = d3.timeParse("%Y-%m-%d");
    for (var i = 0; i < prices.length; i++) {
        
        prices[i]['Date'] = dateFormat(prices[i]['Date'])
    }

    const margin = {top: 15, right: 65, bottom: 205, left: 50},
    w = 1000 - margin.left - margin.right,
    h = 625 - margin.top - margin.bottom;

    var svg = d3.select("#container")
                    .attr("width", w + margin.left + margin.right)
                    .attr("height", h + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" +margin.left+ "," +margin.top+ ")");

    let dates = _.map(prices, 'Date');
    
    var xmin = d3.min(prices.map(r => r.Date.getTime()));
    var xmax = d3.max(prices.map(r => r.Date.getTime()));
    var xScale = d3.scaleLinear().domain([-1, dates.length])
                    .range([0, w])
    var xDateScale = d3.scaleQuantize().domain([0, dates.length]).range(dates)
    let xBand = d3.scaleBand().domain(d3.range(-1, dates.length)).range([0, w]).padding(0.3)
    var xAxis = d3.axisBottom()
                              .scale(xScale)
                            .tickFormat(function(d) {
                                  d = dates[d]
                                    hours = d.getHours()
                                    minutes = (d.getMinutes()<10?'0':'') + d.getMinutes() 
                                    amPM = hours < 13 ? 'am' : 'pm'
                                    return hours + ':' + minutes + amPM + ' ' + d.getDate() + ' ' + months[d.getMonth()] + ' ' + d.getFullYear()
                                });
    
    svg.append("rect")
                .attr("id","rect")
                .attr("width", w)
                .attr("height", h)
                .style("fill", "none")
                .style("pointer-events", "all")
                .attr("clip-path", "url(#clip)")
    
    var gX = svg.append("g")
                .attr("class", "axis x-axis") //Assign "axis" class
                .attr("transform", "translate(0," + h + ")")
                .call(xAxis)
    
    gX.selectAll(".tick text")
      .call(wrap, xBand.bandwidth())

    var ymin = d3.min(prices.map(r => r.Low));
    var ymax = d3.max(prices.map(r => r.High));
    var yScale = d3.scaleLinear().domain([ymin, ymax]).range([h, 0]).nice();
    var yAxis = d3.axisLeft()
                  .scale(yScale)
    
    var gY = svg.append("g")
                .attr("class", "axis y-axis")
                .call(yAxis);
    
    var chartBody = svg.append("g")
                .attr("class", "chartBody")
                .attr("clip-path", "url(#clip)");
    
    // draw rectangles
    let candles = chartBody.selectAll(".candle")
       .data(prices)
       .enter()
       .append("rect")
       .attr('x', (d, i) => xScale(i) - xBand.bandwidth())
       .attr("class", "candle")
       .attr('y', d => yScale(Math.max(d.Open, d.Close)))
       .attr('width', xBand.bandwidth())
       .attr('height', d => (d.Open === d.Close) ? 1 : yScale(Math.min(d.Open, d.Close))-yScale(Math.max(d.Open, d.Close)))
       .attr("fill", d => (d.Open === d.Close) ? "silver" : (d.Open > d.Close) ? "red" : "green")
    
    // draw high and low
    let stems = chartBody.selectAll("g.line")
       .data(prices)
       .enter()
       .append("line")
       .attr("class", "stem")
       .attr("x1", (d, i) => xScale(i) - xBand.bandwidth()/2)
       .attr("x2", (d, i) => xScale(i) - xBand.bandwidth()/2)
       .attr("y1", d => yScale(d.High))
       .attr("y2", d => yScale(d.Low))
       .attr("stroke", d => (d.Open === d.Close) ? "white" : (d.Open > d.Close) ? "red" : "green");
    
    svg.append("defs")
       .append("clipPath")
       .attr("id", "clip")
       .append("rect")
       .attr("width", w)
       .attr("height", h)
    
    const extent = [[0, 0], [w, h]];
    
    var resizeTimer;
    var zoom = d3.zoom()
      .scaleExtent([1, 100])
      .translateExtent(extent)
      .extent(extent)
      .on("zoom", zoomed)
      .on('zoom.end', zoomend);
    
    svg.call(zoom)

    function zoomed() {
        
        var t = d3.event.transform;
        let xScaleZ = t.rescaleX(xScale);
        
        let hideTicksWithoutLabel = function() {
            d3.selectAll('.xAxis .tick text').each(function(d){
                if(this.innerHTML === '') {
                this.parentNode.style.display = 'none'
                }
            })
        }

        gX.call(
            d3.axisBottom(xScaleZ).tickFormat((d, e, target) => {
                    if (d >= 0 && d <= dates.length-1) {
                d = dates[d]
                hours = d.getHours()
                minutes = (d.getMinutes()<10?'0':'') + d.getMinutes() 
                amPM = hours < 13 ? 'am' : 'pm'
                return hours + ':' + minutes + amPM + ' ' + d.getDate() + ' ' + months[d.getMonth()] + ' ' + d.getFullYear()
                }
            })
        )

        candles.attr("x", (d, i) => xScaleZ(i) - (xBand.bandwidth()*t.k)/2)
               .attr("width", xBand.bandwidth()*t.k);
        stems.attr("x1", (d, i) => xScaleZ(i) - xBand.bandwidth()/2 + xBand.bandwidth()*0.5);
        stems.attr("x2", (d, i) => xScaleZ(i) - xBand.bandwidth()/2 + xBand.bandwidth()*0.5);

        hideTicksWithoutLabel();

        gX.selectAll(".tick text")
        .call(wrap, xBand.bandwidth())

    }

    function zoomend() {
        var t = d3.event.transform;
        let xScaleZ = t.rescaleX(xScale);
        clearTimeout(resizeTimer)
        resizeTimer = setTimeout(function() {

        var xmin = new Date(xDateScale(Math.floor(xScaleZ.domain()[0])))
            xmax = new Date(xDateScale(Math.floor(xScaleZ.domain()[1])))
            filtered = _.filter(prices, d => ((d.Date >= xmin) && (d.Date <= xmax)))
            minP = +d3.min(filtered, d => d.Low)
            maxP = +d3.max(filtered, d => d.High)
            buffer = Math.floor((maxP - minP) * 0.1)

        yScale.domain([minP - buffer, maxP + buffer])
        candles.transition()
               .duration(800)
               .attr("y", (d) => yScale(Math.max(d.Open, d.Close)))
               .attr("height",  d => (d.Open === d.Close) ? 1 : yScale(Math.min(d.Open, d.Close))-yScale(Math.max(d.Open, d.Close)));
               
        stems.transition().duration(800)
             .attr("y1", (d) => yScale(d.High))
             .attr("y2", (d) => yScale(d.Low))
        
        gY.transition().duration(800).call(d3.axisLeft().scale(yScale));

        }, 500)
        
    }
});
}

function wrap(text, width) {
text.each(function() {
  var text = d3.select(this),
      words = text.text().split(/\s+/).reverse(),
      word,
      line = [],
      lineNumber = 0,
      lineHeight = 1.1, // ems
      y = text.attr("y"),
      dy = parseFloat(text.attr("dy")),
      tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
  while (word = words.pop()) {
    line.push(word);
    tspan.text(line.join(" "));
    if (tspan.node().getComputedTextLength() > width) {
      line.pop();
      tspan.text(line.join(" "));
      line = [word];
      tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
    }
  }
});
}

drawChart();
        </script>
    </div>
</body>
</html>